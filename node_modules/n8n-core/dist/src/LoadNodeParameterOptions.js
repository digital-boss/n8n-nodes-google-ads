"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadNodeParameterOptions = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const _1 = require(".");
const TEMP_NODE_NAME = 'Temp-Node';
const TEMP_WORKFLOW_NAME = 'Temp-Workflow';
class LoadNodeParameterOptions {
    constructor(nodeTypeNameAndVersion, nodeTypes, path, currentNodeParameters, credentials) {
        const nodeType = nodeTypes.getByNameAndVersion(nodeTypeNameAndVersion.name, nodeTypeNameAndVersion.version);
        this.path = path;
        if (nodeType === undefined) {
            throw new Error(`The node-type "${nodeTypeNameAndVersion.name} v${nodeTypeNameAndVersion.version}"  is not known!`);
        }
        const nodeData = {
            parameters: currentNodeParameters,
            name: TEMP_NODE_NAME,
            type: nodeTypeNameAndVersion.name,
            typeVersion: nodeTypeNameAndVersion.version,
            position: [0, 0],
        };
        if (credentials) {
            nodeData.credentials = credentials;
        }
        const workflowData = {
            nodes: [nodeData],
            connections: {},
        };
        this.workflow = new n8n_workflow_1.Workflow({
            nodes: workflowData.nodes,
            connections: workflowData.connections,
            active: false,
            nodeTypes,
        });
    }
    getWorkflowData() {
        return {
            name: TEMP_WORKFLOW_NAME,
            active: false,
            connections: {},
            nodes: Object.values(this.workflow.nodes),
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async getOptions(methodName, additionalData) {
        const node = this.workflow.getNode(TEMP_NODE_NAME);
        const nodeType = this.workflow.nodeTypes.getByNameAndVersion(node.type, node === null || node === void 0 ? void 0 : node.typeVersion);
        if (!nodeType ||
            nodeType.methods === undefined ||
            nodeType.methods.loadOptions === undefined ||
            nodeType.methods.loadOptions[methodName] === undefined) {
            throw new Error(`The node-type "${node.type}" does not have the method "${methodName}" defined!`);
        }
        const thisArgs = _1.NodeExecuteFunctions.getLoadOptionsFunctions(this.workflow, node, this.path, additionalData);
        return nodeType.methods.loadOptions[methodName].call(thisArgs);
    }
}
exports.LoadNodeParameterOptions = LoadNodeParameterOptions;
//# sourceMappingURL=LoadNodeParameterOptions.js.map