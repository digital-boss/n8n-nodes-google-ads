import { IContextObject, INode, INodeCredentialDescription, INodeExecutionData, INodeIssues, INodeParameters, INodeProperties, INodeType, INodeVersionedType, IParameterDependencies, IRunExecutionData, IWebhookData, IWorkflowExecuteAdditionalData, NodeParameterValue } from './Interfaces';
import { Workflow } from './Workflow';
export declare function getSpecialNodeParameters(nodeType: INodeType): INodeProperties[];
export declare function displayParameter(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, nodeValuesRoot?: INodeParameters): boolean;
export declare function displayParameterPath(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, path: string): boolean;
export declare function getContext(runExecutionData: IRunExecutionData, type: string, node?: INode): IContextObject;
export declare function getParamterDependencies(nodePropertiesArray: INodeProperties[]): IParameterDependencies;
export declare function getParamterResolveOrder(nodePropertiesArray: INodeProperties[], parameterDependencies: IParameterDependencies): number[];
export declare function getNodeParameters(nodePropertiesArray: INodeProperties[], nodeValues: INodeParameters, returnDefaults: boolean, returnNoneDisplayed: boolean, onlySimpleTypes?: boolean, dataIsResolved?: boolean, nodeValuesRoot?: INodeParameters, parentType?: string, parameterDependencies?: IParameterDependencies): INodeParameters | null;
export declare function prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
export declare function getNodeWebhooks(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, ignoreRestartWehbooks?: boolean): IWebhookData[];
export declare function getNodeWebhooksBasic(workflow: Workflow, node: INode): IWebhookData[];
export declare function getNodeWebhookPath(workflowId: string, node: INode, path: string, isFullPath?: boolean, restartWebhook?: boolean): string;
export declare function getNodeWebhookUrl(baseUrl: string, workflowId: string, node: INode, path: string, isFullPath?: boolean): string;
export declare function getNodeParametersIssues(nodePropertiesArray: INodeProperties[], node: INode): INodeIssues | null;
export declare function nodeIssuesToString(issues: INodeIssues, node?: INode): string[];
export declare function addToIssuesIfMissing(foundIssues: INodeIssues, nodeProperties: INodeProperties, value: NodeParameterValue): void;
export declare function getParameterValueByPath(nodeValues: INodeParameters, parameterName: string, path: string): INodeParameters | NodeParameterValue | NodeParameterValue[] | INodeParameters[];
export declare function getParameterIssues(nodeProperties: INodeProperties, nodeValues: INodeParameters, path: string): INodeIssues;
export declare function mergeIssues(destination: INodeIssues, source: INodeIssues | null): void;
export declare function mergeNodeProperties(mainProperties: INodeProperties[], addProperties: INodeProperties[]): void;
export declare function getVersionedTypeNode(object: INodeVersionedType | INodeType, version?: number): INodeType;
export declare function getVersionedTypeNodeAll(object: INodeVersionedType | INodeType): INodeType[];
export declare function isNodeTypeVersioned(object: INodeVersionedType | INodeType): boolean;
